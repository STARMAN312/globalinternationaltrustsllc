@model ExternalTransferFundsVM
@using System.Text.RegularExpressions
@using System.Globalization

@{
	Layout = "_ClientLayout";
	ViewData["Title"] = "Global International Trust Bank - Review Transfer";
}

<nav aria-label="breadcrumb">
	<ol class="breadcrumb breadcrumb-style mg-b-0">
		<li class="breadcrumb-item">
			<a>Global International Trust Bank</a>
		</li>
		<li class="breadcrumb-item">
			<a asp-controller="Account" asp-action="Index">Account</a>
		</li>
		<li class="breadcrumb-item active">Review transfer to external account</li>
	</ol>
</nav>

<div class="mt-2 account-information">
	<div class="card bg-gray-200 bd-0">
		<div class="card-body">
			@if (!ViewData.ModelState.IsValid)
			{
				<div class="card bg-warning text-white">
					<div class="card-body d-flex align-items-center p-3">
						<i class="fas fa-exclamation-circle me-2"></i>
						<div asp-validation-summary="ModelOnly" class="validation-summary-no-bullets flex-grow-1"></div>
					</div>
				</div>
			}
			<div class="card-body rounded">
				<form asp-action="ConfirmExternalTransfer">
					<input type="hidden" asp-for="AccountId" />
					<input type="hidden" asp-for="TransferType" />
					<input type="hidden" asp-for="ToAccountNumber" />
					<input type="hidden" asp-for="RecipientName" />
					<input type="hidden" asp-for="Amount" />
					<input type="hidden" asp-for="Purpose" />
					<input type="hidden" asp-for="Description" />
					<input type="hidden" asp-for="Pin" />
					<div class="text-center">
						<i class="fa fa-key mg-b-20 tx-50 text-success"></i>
						<h3 class="mt-3 text-dark">Confirm Transfer</h3>
						<span>Please review the transfer details below</span>
						<div class="card px-3 ps-4 bg-light mt-5">
							<div class="row index1 text-center">
								<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-xxl-3">
									<div class="row border-end bd-xs-e-0 p-3">
										<div class="pt-4 pb-3">
											<div class="d-flex">
												<h6 class="mb-2 tx-12">From Account</h6>
											</div>
											<div class="pb-0 mt-0">
												<div class="d-flex">
													<h4 class="tx-18 font-weight-semibold mb-0">@Regex.Replace(Model.FromAccount.Type.ToString(), "(\\B[A-Z])", " $1")</h4>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-xxl-3">
									<div class="row border-end bd-xs-e-0 p-3">
										<div class="pt-4 pb-3">
											<div class="d-flex">
												<h6 class="mb-2 tx-12">To Account</h6>
											</div>
											<div class="pb-0 mt-0">
												<div class="d-flex">
													<h4 class="tx-18 font-weight-semibold mb-0">@Model.ToAccountNumber</h4>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-xxl-3">
									<div class="row border-end bd-xs-e-0 p-3">
										<div class="pt-4 pb-3">
											<div class="d-flex">
												<h6 class="mb-2 tx-12">Recipient</h6>
											</div>
											<div class="pb-0 mt-0">
												<div class="d-flex">
													<h4 class="tx-18 font-weight-semibold mb-0">@Model.RecipientName</h4>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-xxl-3">
									<div class="row border-end bd-xs-e-0 p-3">
										<div class="pt-4 pb-3">
											<div class="d-flex">
												<h6 class="mb-2 tx-12">Amount</h6>
											</div>
											<div class="pb-0 mt-0">
												<div class="d-flex">
													<h4 data-usd="@Model.Amount.ToString(CultureInfo.InvariantCulture)" class="tx-18 text-success font-weight-semibold mb-0 market-price">
														<span class="balance-text">
															$@Model.Amount.ToString("N2")
														</span>
													</h4>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-xxl-3">
									<div class="row border-end bd-xs-e-0 p-3">
										<div class="pt-4 pb-3">
											<div class="d-flex">
												<h6 class="mb-2 tx-12">Purpose</h6>
											</div>
											<div class="pb-0 mt-0">
												<div class="d-flex">
													<h4 class="tx-18 font-weight-semibold mb-0">@Regex.Replace(Model.Purpose, "(\\B[A-Z])", " $1")</h4>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-xxl-3">
									<div class="row border-end bd-xs-e-0 p-3">
										<div class="pt-4 pb-3">
											<div class="d-flex">
												<h6 class="mb-2 tx-12">Transfer Date</h6>
											</div>
											<div class="pb-0 mt-0">
												<div class="d-flex">
													<h4 class="tx-18 font-weight-semibold mb-0">@DateTime.Now.ToLocalTime().ToString("MM-dd-yyyy")</h4>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div>
						<span class="tx-12 mb-0 text-muted market-price" data-usd="50">
							*<span class="balance-text">$50 USD</span> Service Fee not included
						</span>
					</div>
					<div class="modal-footer">
						<a asp-controller="Account" asp-action="Index" class="btn btn-outline-dark ms-4 px-5">Cancel</a>
						<button type="submit" class="btn btn-info px-5">Confirm Transfer</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const exchangeRates = JSON.parse(localStorage.getItem("exchangeRates") || "{}");
		const selectedCurrency = localStorage.getItem("selectedCurrency") || "USD";

		const currencySymbols = {
			USD: "$", CAD: "$", EUR: "€", GBP: "£",
			JPY: "¥", MXN: "$", KWD: "د.ك"
		};

		function formatPrice(value, currency) {
			const symbol = currencySymbols[currency] || '';
			return symbol + value.toLocaleString(undefined, { minimumFractionDigits: 2 }) + " " + currency;
		}

		function convertPrice(priceInUsd, currency) {
			if (!exchangeRates[currency] || !exchangeRates["USD"]) return priceInUsd;
			return priceInUsd * exchangeRates[currency] / exchangeRates["USD"];
		}

		// Convert all price elements
		document.querySelectorAll('.market-price').forEach(option => {
			const balanceSpan = option.querySelector('.balance-text');
			if (!balanceSpan) return;

			const priceUsd = parseFloat(option.getAttribute('data-usd'));
			if (isNaN(priceUsd)) return;

			const converted = convertPrice(priceUsd, selectedCurrency);
			const formatted = formatPrice(converted, selectedCurrency);

			balanceSpan.textContent = formatted;
		});

		// Update balance display
		const balanceEl = document.getElementById("convertedBalance");
		if (balanceEl) {
			const value = parseFloat(balanceEl.getAttribute("data-value")) || 0;
			balanceEl.textContent = formatPrice(value, selectedCurrency);
		}
	});
</script>