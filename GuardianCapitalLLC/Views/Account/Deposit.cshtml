@model DepositVM
@using System.Text.RegularExpressions
@using System.Globalization

@{
	Layout = "_ClientLayout";
	ViewData["Title"] = "Global International Trust Bank - Deposit";
}


<nav aria-label="breadcrumb">
	<ol class="breadcrumb breadcrumb-style mg-b-0">
		<li class="breadcrumb-item">
			<a>Global International Trust Bank</a>
		</li>
		<li class="breadcrumb-item">
			<a asp-controller="Account" asp-action="Index">Account</a>
		</li>
		<li class="breadcrumb-item active">Deposit</li>
	</ol>
</nav>

<div class="mt-2 account-information">
	<div class="card bg-gray-200 bd-0">
		<div class="card-body mb-2">
			<form>
				<input type="hidden" id="Amount" name="Amount" />
				@if (!ViewData.ModelState.IsValid) 
				{ 
					<div class="card bg-warning text-white"> 
						<div class="card-body d-flex align-items-center p-3"> 
							<i class="fas fa-exclamation-circle me-2"></i> 
							<div asp-validation-summary="ModelOnly" class="validation-summary-no-bullets flex-grow-1"></div> 
						</div> 
					</div> 
				 } 
				<div class="media mt-0">
					<span class="me-3 bg-info-transparent text-info transaction-icon">
						<i class="fas fa-dollar-sign"></i>
					</span>
					<div class="media-body">
						<div class="d-flex align-items-center">
							<div class="mt-0">
								<h5 class="mb-1 tx-20 font-weight-sembold text-dark">Deposit Funds</h5>
								<p class="mb-0 tx-12 text-dark">Securely deposit money into your account</p>
							</div>
						</div>
					</div>
				</div>
				<div class="form-group mt-5"> 
					<label>Select Account</label> 
					<select class="form-control" asp-for="AccountId"> 
						<option disabled selected value="">-- Select account to deposit --</option>
						@foreach (var acc in Model.BankAccounts) 
						{ 
							<option value="@acc.Id" data-usd="@acc.Balance.ToString(CultureInfo.InvariantCulture)" class="market-price"> 
								@Regex.Replace(acc.Type.ToString(), "(\\B[A-Z])", " $1")
								- <span class="balance-text">$@acc.Balance.ToString("N2") USD</span> 
							</option> 
						} 
					</select> 
				</div> 
				<div class="form-group mt-2">
					<label>Amount</label>
					<div class="input-group mb-3">
						<span class="input-group-text bg-info-transparent text-info" id="basic-addon1">$</span>
						<input type="text" id="AmountInput" class="form-control" placeholder="0.00" />
					</div>
				</div>
				<div class="border p-3 mb-2 mt-2 rounded d-flex flex-column align-items-center justify-content-center text-center">
					<div id="notification-container" class="w-100" style="max-width: 70%;">
						<!-- Notification messages go here -->
					</div>
					<div id="paypal-button-container" class="w-100" style="max-width: 70%;">
						<!-- PayPal button goes here -->
					</div>
				</div>
				<div class="main-icon-group main-icon-list font-awesome mt-1">
					<span class="mb-0 tx-15 text-dark">Other accepted payment methods</span>
					<ul class="icons-list">
						<li class="icons-list-item" data-bs-placement="top" data-bs-toggle="tooltip" title="Western Union (Contact support for more information)">
							<a href="https://www.westernunion.com" target="_blank" rel="noopener noreferrer">
								<img src="~/img/payments/westernunion-dark.svg" alt="Western Union" style="height: 24px; width: auto;">
							</a>
						</li>
						<li class="icons-list-item" data-bs-placement="top" data-bs-toggle="tooltip" title="Moneygram (Contact support for more information)">
							<a href="https://www.moneygram.com" target="_blank" rel="noopener noreferrer">
								<img src="~/img/payments/moneygram-seeklogo.svg" alt="MoneyGram" style="height: 24px; width: auto;">
							</a>
						</li>
						<li class="icons-list-item" data-bs-placement="top" data-bs-toggle="tooltip" title="Wells Fargo (Contact support for more information)">
							<a href="https://www.wellsfargo.com" target="_blank" rel="noopener noreferrer">
								<img src="~/img/payments/WFC.svg" alt="Wells Fargo" style="height: 24px; width: auto;">
							</a>
						</li>
						<li class="icons-list-item" data-bs-placement="top" data-bs-toggle="tooltip" title="Chase Bank (Contact support for more information)">
							<a href="https://www.chase.com" target="_blank" rel="noopener noreferrer">
								<img src="~/img/payments/Chase_Bank-Logo.wine.svg" alt="Chase Bank" style="height: 24px; width: auto;">
							</a>
						</li>
						<li class="icons-list-item" data-bs-placement="top" data-bs-toggle="tooltip" title="RBC Bank (Contact support for more information)">
							<a href="https://www.rbcroyalbank.com/" target="_blank" rel="noopener noreferrer">
								<img src="~/img/payments/RY_BIG.svg" alt="RBC Bank" style="height: 24px; width: auto;">
							</a>
						</li>
						<li class="icons-list-item" data-bs-placement="top" data-bs-toggle="tooltip" title="Bank of America (Contact support for more information)">
							<a href="https://www.bankofamerica.com" target="_blank" rel="noopener noreferrer">
								<img src="~/img/payments/BAC_BIG.svg" alt="Bank of America" style="height: 24px; width: auto;">
							</a>
						</li>
						<li class="icons-list-item" data-bs-placement="top" data-bs-toggle="tooltip" title="PNC Bank (Contact support for more information)">
							<a href="https://www.pnc.com" target="_blank" rel="noopener noreferrer">
								<img src="~/img/payments/PNC_BIG.svg" alt="PNC Bank" style="height: 24px; width: auto;">
							</a>
						</li>
					</ul>
				</div>
			</form>
		</div>
	</div>
</div>

<script src="https://www.paypal.com/sdk/js?client-id=@(ViewBag.PaypalClientId)&currency=USD"></script>

<script>

	paypal.Buttons({
		async createOrder() {
			const response = await fetch("@Url.Action("ProcessDeposit", "Account")", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
				  amount: document.getElementById("Amount").value,
				  currency: localStorage.getItem("selectedCurrency") || "USD"
				})
			});

			const order = await response.json();

			return order.id;
		},
		async onApprove(data) {
			const response = await fetch("@Url.Action("ConfirmDeposit", "Account")", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
				  orderID: data.orderID,
				  accountId: document.querySelector('[name="AccountId"]').value
				})
			})

			const details = await response.json();

			console.log(details);

			if(details === "success"){
				window.location.href = '@Url.Action("Index", "Account")';
			}

		},
		onCancel(data){
			document.getElementById("notification-container").innerHTML = 
			'<div class="alert alert-info alert-dismissible fade show mb-2" role="alert"><strong>Operation cancelled.</strong><button aria-label="Close" class="btn-close" data-bs-dismiss="alert" type="button"><span aria-hidden="true">&times;</span></button></div>';
		},
		onError(err){
			document.getElementById("notification-container").innerHTML =
			'<div class="alert alert-danger mg-b-0 alert-dismissible fade show mb-2" role="alert "><strong>An error ocurred.</strong> Please try again later.<button aria-label="Close" class="btn-close" data-bs-dismiss="alert" type="button"><span aria-hidden="true">&times;</span></button></div>';
		}
	}).render('#paypal-button-container');

	const formattedInput = document.getElementById('AmountInput');
	const hiddenInput = document.getElementById('Amount');

	formattedInput.addEventListener('input', function () {
		const rawValue = formattedInput.value.replace(/,/g, '');
		hiddenInput.value = rawValue;
	});

	document.getElementById('AmountInput').addEventListener('input', function (e) {
		const input = e.target;
		let value = input.value;

		// Save cursor position before formatting
		let selectionStart = input.selectionStart;

		// Count commas before formatting
		const commasBefore = (value.slice(0, selectionStart).match(/,/g) || []).length;

		// Remove all except digits and dot
		value = value.replace(/[^\d.]/g, '');

		// Allow only one dot
		const parts = value.split('.');
		if (parts.length > 2) {
			value = parts.shift() + '.' + parts.join('');
		}

		const endsWithDot = value.endsWith('.');

		// Split integer and decimal parts
		const [intPart, decimalPartRaw] = value.split('.');
		let decimalPart = decimalPartRaw || '';

		if (decimalPart.length > 2) {
			decimalPart = decimalPart.substring(0, 2);
		}

		// Format integer with commas
		const intFormatted = intPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

		// Rebuild formatted value
		const formattedValue = endsWithDot
			? `${intFormatted}.`
			: decimalPart
			? `${intFormatted}.${decimalPart}`
			: intFormatted;

		// Set the formatted value
		input.value = formattedValue;

		// Count commas after formatting
		const commasAfter = (formattedValue.slice(0, selectionStart).match(/,/g) || []).length;

		const commaDifference = commasAfter - commasBefore;
		let newPos = selectionStart + commaDifference;

		if (endsWithDot && newPos === formattedValue.length - 1) {
			newPos = formattedValue.length;
		}

		input.setSelectionRange(newPos, newPos);

		// Now parse the raw number entered (in selected currency)
		const rawAmount = parseFloat(intPart + (decimalPart ? '.' + decimalPart : ''));

		// Get exchange rates and selected currency from localStorage
		const exchangeRates = JSON.parse(localStorage.getItem("exchangeRates") || "{}");
		const selectedCurrency = localStorage.getItem("selectedCurrency") || "USD";

		let amountInUsd = rawAmount;
		if (exchangeRates[selectedCurrency] && exchangeRates["USD"]) {
			amountInUsd = rawAmount * exchangeRates["USD"] / exchangeRates[selectedCurrency];
		}

		// Set hidden input with converted amount in USD, fixed to 2 decimals
		document.getElementById('Amount').value = amountInUsd.toFixed(2);
	});

	document.addEventListener("DOMContentLoaded", function () {
		const exchangeRates = JSON.parse(localStorage.getItem("exchangeRates") || "{}");
		const selectedCurrency = localStorage.getItem("selectedCurrency") || "USD";

		const currencySymbols = {
			USD: "$", CAD: "$", EUR: "€", GBP: "£",
			JPY: "¥", MXN: "$", KWD: "د.ك"
		};

		function formatPrice(value, currency) {
			const symbol = currencySymbols[currency] || '';
			return symbol + value.toLocaleString(undefined, { minimumFractionDigits: 2 }) + " " + currency;
		}

		function convertPrice(priceInUsd, currency) {
			if (!exchangeRates[currency] || !exchangeRates["USD"]) return priceInUsd;
			return priceInUsd * exchangeRates[currency] / exchangeRates["USD"];
		}

		// Convert all price elements
		document.querySelectorAll('.market-price').forEach(option => {
			const balanceSpan = option.querySelector('.balance-text');
			if (!balanceSpan) return;

			const priceUsd = parseFloat(option.getAttribute('data-usd'));
			if (isNaN(priceUsd)) return;

			const converted = convertPrice(priceUsd, selectedCurrency);
			const formatted = formatPrice(converted, selectedCurrency);

			balanceSpan.textContent = formatted;
		});

		// Update balance display
		const balanceEl = document.getElementById("convertedBalance");
		if (balanceEl) {
			const value = parseFloat(balanceEl.getAttribute("data-value")) || 0;
			balanceEl.textContent = formatPrice(value, selectedCurrency);
		}
	});

</script>